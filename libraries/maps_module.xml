<blocks app="Snap! 5.0, http://snap.berkeley.edu" version="1"><block-definition s="$flag Map $globe" type="command" category="other"><header></header><code></code><translations>de:$flag Karte $globe&#xD;</translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>test</l></list></block><block s="doSetVar"><l>test</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var apiLink,&#xD;    apiScript,&#xD;    done = false;&#xD;&#xD;if (window.L) {return function () {return true; }; } // already loaded&#xD;&#xD;apiLink = document.createElement(&apos;link&apos;);&#xD;apiLink.setAttribute(&apos;rel&apos;, &apos;stylesheet&apos;);&#xD;apiLink.setAttribute(&apos;type&apos;, &apos;text/css&apos;);&#xD;apiLink.setAttribute(&apos;href&apos;, &apos;https://unpkg.com/leaflet@1.5.1/dist/leaflet.css&apos;);&#xD;document.head.appendChild(apiLink);&#xD;&#xD;apiScript = document.createElement(&apos;script&apos;),&#xD;apiScript.onload = function () {done = true; };&#xD;document.head.appendChild(apiScript);&#xD;apiScript.src = &apos;https://unpkg.com/leaflet@1.5.1/dist/leaflet.js&apos;;&#xD;return function () {return done; }</l></block><list></list></block></block><block s="doWaitUntil"><block s="evaluate"><block var="test"/><list></list></block></block><block s="doRun"><block s="reportJSFunction"><list><l>stage</l></list><l>stage.mapSource = elem = document.getElementById("mapSource");&#xD;if (stage.mapSource &amp;&amp; window.MapModel) {&#xD;  // already running&#xD;  stage.mapModel = MapModel;&#xD;  return;&#xD;}&#xD;stage.mapSource = document.createElement(&apos;div&apos;);&#xD;stage.mapSource.id = &apos;mapSource&apos;;&#xD;stage.mapSource.style.width = stage.dimensions.x + &apos;px&apos;;&#xD;stage.mapSource.style.height = stage.dimensions.y + &apos;px&apos;;&#xD;stage.mapSource.width = stage.dimensions.x;&#xD;stage.mapSource.height = stage.dimensions.y;&#xD;document.body.appendChild(stage.mapSource);&#xD;stage.mapSource.style.zIndex = "-1";&#xD;&#xD;stage.mapModel = L.map(&apos;mapSource&apos;).setView([37.8721673, -122.2575537,18.87], 13);&#xD;stage.mapModel.tileLayer = L.tileLayer(&#xD;  &apos;https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=&apos; + &#xD;   &apos;pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw&apos;,&#xD;  {&#xD;    minZoom: 1,&#xD;		  maxZoom: 20,&#xD;    detectRetina: false,&#xD;    crossOrigin: true,&#xD;		  id: &apos;mapbox.streets&apos;&#xD;	 });&#xD;stage.mapModel.tileLayer.addTo(stage.mapModel);&#xD;window.MapModel = stage.mapModel; // make globel so survive project de-serialization</l></block><list><block s="reportGet"><l><option>stage</option></l></block></list></block><custom-block s="set $globe to lat: %n long: %n"><custom-block s="$globe current latitude"></custom-block><custom-block s="$globe current longitude"></custom-block></custom-block></script></block-definition><block-definition s="$globe zoom" type="reporter" category="other"><header></header><code></code><translations>de:$globe Zoom&#xD;</translations><inputs></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>stage</l></list><l>return stage.mapModel.getZoom();</l></block><list><block s="reportGet"><l><option>stage</option></l></block></list></block></block></script></block-definition><block-definition s="set $globe zoom to %&apos;n&apos;" type="command" category="other"><header></header><code></code><translations>de:setze $globe Zoom auf _&#xD;</translations><inputs><input type="%n">10</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>stage</l><l>n</l></list><l>stage.mapModel.setZoom(n, {animate: false});</l></block><list><block s="reportGet"><l><option>stage</option></l></block><block var="n"/></list></block><custom-block s="update $globe"></custom-block></script></block-definition><block-definition s="$globe longitude of x %&apos;x&apos;" type="reporter" category="other"><header></header><code></code><translations>de:$globe Längengrad von x _&#xD;</translations><inputs><input type="%n">0</input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>stage</l><l>x</l><l>y</l></list><l>return stage.mapModel.containerPointToLatLng([x + (stage.dimensions.x / 2), (stage.dimensions.y / 2) - y]).lng</l></block><list><block s="reportGet"><l><option>stage</option></l></block><block var="x"/><l>0</l></list></block></block></script></block-definition><block-definition s="$globe latitude of y %&apos;y&apos;" type="reporter" category="other"><header></header><code></code><translations>de:$globe Breitengrad von y _&#xD;</translations><inputs><input type="%n">0</input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>stage</l><l>x</l><l>y</l></list><l>return stage.mapModel.containerPointToLatLng([x + (stage.dimensions.x / 2), (stage.dimensions.y / 2) - y]).lat</l></block><list><block s="reportGet"><l><option>stage</option></l></block><l>0</l><block var="y"/></list></block></block></script></block-definition><block-definition s="set $globe to lat: %&apos;lat&apos; long: %&apos;lon&apos;" type="command" category="other"><header></header><code></code><translations>de:setze $globe auf Länge: _ Breite: _&#xD;</translations><inputs><input type="%n">48.558475</input><input type="%n">8.8426195</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>stage</l><l>lat</l><l>lon</l></list><l>stage.mapModel.panTo(L.latLng(lat, lon), {animate: false});</l></block><list><block s="reportGet"><l><option>stage</option></l></block><block var="lat"/><block var="lon"/></list></block><custom-block s="update $globe"></custom-block></script></block-definition><block-definition s="y of $globe latitude %&apos;lat&apos;" type="reporter" category="other"><header></header><code></code><translations>de:y von $globe Breitengrad _&#xD;</translations><inputs><input type="%n"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>stage</l><l>lat</l><l>lng</l></list><l>return (stage.dimensions.y / 2) - stage.mapModel.latLngToContainerPoint(L.latLng(lat, lng)).y</l></block><list><block s="reportGet"><l><option>stage</option></l></block><block var="lat"/><l>0</l></list></block></block></script></block-definition><block-definition s="x of $globe longitude %&apos;lng&apos;" type="reporter" category="other"><header></header><code></code><translations>de:x von $globe Längengrad _&#xD;</translations><inputs><input type="%n"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>stage</l><l>lat</l><l>lng</l></list><l>return stage.mapModel.latLngToContainerPoint(L.latLng(lat, lng)).x - (stage.dimensions.x / 2)</l></block><list><block s="reportGet"><l><option>stage</option></l></block><l>0</l><block var="lng"/></list></block></block></script></block-definition><block-definition s="change $globe by x: %&apos;x&apos; y: %&apos;y&apos; pixels" type="command" category="other"><header></header><code></code><translations>de:ändere $globe um x: _ y: _ Pixel&#xD;</translations><inputs><input type="%n">10</input><input type="%n">10</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>stage</l><l>x</l><l>y</l></list><l>stage.mapModel.panBy([x, y], {animate: false});&#xD;// stage.mapModel.getPane(&apos;tilePane&apos;).redraw();</l></block><list><block s="reportGet"><l><option>stage</option></l></block><block var="x"/><block var="y"/></list></block><custom-block s="update $globe"></custom-block></script></block-definition><block-definition s="$globe distance to %&apos;target&apos;" type="reporter" category="other"><header></header><code></code><translations>de:$globe Entfernung zu _&#xD;</translations><inputs><input type="%s" readonly="true"><options>§_objectsMenu</options></input></inputs><script><block s="doDeclareVariables"><list><l>trg</l></list></block><block s="doSetVar"><l>trg</l><block s="reportObject"><block var="target"/></block></block><block s="doIf"><block s="reportNot"><block s="reportAnd"><block s="reportIsA"><block s="reportGet"><l><option>self</option></l></block><l><option>sprite</option></l></block><block s="reportIsA"><block var="trg"/><l><option>sprite</option></l></block></block></block><script><block s="doReport"><l>-1</l></block></script></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>stage</l><l>lat1</l><l>lng1</l><l>lat2</l><l>lng2</l></list><l>return stage.mapModel.distance(L.latLng(lat1, lng1), L.latLng(lat2, lng2));</l></block><list><block s="reportGet"><l><option>stage</option></l></block><custom-block s="$globe latitude of y %n"><block s="yPosition"></block></custom-block><custom-block s="$globe longitude of x %n"><block s="xPosition"></block></custom-block><custom-block s="$globe latitude of y %n"><block s="reportAttributeOf"><l><option>y position</option></l><block var="target"/></block></custom-block><custom-block s="$globe longitude of x %n"><block s="reportAttributeOf"><l><option>x position</option></l><block var="target"/></block></custom-block></list></block></block></script></block-definition><block-definition s="$globe current location" type="reporter" category="other"><header></header><code></code><translations>de:$globe aktuelle Position&#xD;</translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>test</l></list></block><block s="doSetVar"><l>test</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var crd = new List(),&#xD;    myself = this,&#xD;    options = {&#xD;      enableHighAccuracy: true,&#xD;      timeout: 5000,&#xD;      maximumAge: 0&#xD;    };&#xD;&#xD;function success(pos) {&#xD;  crd = new List([&#xD;    pos.coords.latitude,&#xD;    pos.coords.longitude&#xD;  ]);&#xD;}&#xD;&#xD;function error(err) {&#xD;  crd = new List([37.872099, -122.257852]);&#xD;  myself.inform(&apos;Warning:\nGeolocation failed.&apos;);&#xD;}&#xD;&#xD;navigator.geolocation.getCurrentPosition(&#xD;  success,&#xD;  error,&#xD;  options&#xD;);&#xD;&#xD;return function () {return crd; }</l></block><list></list></block></block><block s="doWaitUntil"><block s="reportEquals"><block s="reportListLength"><block s="evaluate"><block var="test"/><list></list></block></block><l>2</l></block></block><block s="doReport"><block s="evaluate"><block var="test"/><list></list></block></block></script></block-definition><block-definition s="$globe current latitude" type="reporter" category="other"><header></header><code></code><translations>de:$globe aktueller Breitengrad&#xD;</translations><inputs></inputs><script><block s="doReport"><block s="reportListItem"><l>1</l><custom-block s="$globe current location"></custom-block></block></block></script></block-definition><block-definition s="$globe current longitude" type="reporter" category="other"><header></header><code></code><translations>de:$globe aktueller Längengrad&#xD;</translations><inputs></inputs><script><block s="doReport"><block s="reportListItem"><l>2</l><custom-block s="$globe current location"></custom-block></block></block></script></block-definition><block-definition s="update $globe" type="command" category="other"><header></header><code></code><translations>de:aktualisiere $globe&#xD;</translations><inputs></inputs><script><block s="doTellTo"><l>Stage</l><block s="reifyScript"><script><block s="doSwitchToCostume"><custom-block s="get $globe costume"></custom-block></block></script><list></list></block><list></list></block></script></block-definition><block-definition s="get $globe costume" type="reporter" category="other"><header></header><code></code><translations>de:hole $globe Kostüm&#xD;</translations><inputs></inputs><script><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>stage</l></list><l>return !stage.mapModel.tileLayer.isLoading()</l></block><list><block s="reportGet"><l><option>stage</option></l></block></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>stage</l></list><l>var mapElement = stage.mapModel.getPane(&apos;tilePane&apos;), &#xD;    imgs = mapElement.getElementsByClassName("leaflet-tile"),&#xD;    srcPos = L.DomUtil.getPosition(mapElement),&#xD;    offset,&#xD;    tilePos,&#xD;    canvas = newCanvas(stage.dimensions, true),&#xD;    ctx = canvas.getContext(&apos;2d&apos;),&#xD;    i, tile;&#xD;&#xD;for (i = 0; i &lt; imgs.length; i += 1) {&#xD;  tile = imgs[i];&#xD;  offset = L.DomUtil.getStyle(&#xD;    stage.mapModel.getPane(&apos;mapPane&apos;),&#xD;    &apos;transform&apos;&#xD;  ).split(&apos;(&apos;)[1].split(&apos;,&apos;).map(function (str) {return parseFloat(str); });&#xD;  tilePos = L.DomUtil.getPosition(tile).subtract(srcPos);&#xD;  ctx.drawImage(tile, tilePos.x + offset[0], tilePos.y + offset[1]);&#xD;}&#xD;return new Costume(canvas, &apos;map&apos;);</l></block><list><block s="reportGet"><l><option>stage</option></l></block></list></block></block></script></block-definition></blocks>